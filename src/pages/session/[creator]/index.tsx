import Head from 'next/head'
import Link from 'next/link'
import { Poppins } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { FunctionComponent, useEffect, useState } from 'react'
import Nav from '../components/Nav'
import { GetServerSideProps } from 'next'
import SessionCard from '../components/SessionCard'
import UpcomingSessionCard from '@/components/UpcomingSessionCard'
import { Session } from '@/types'
import {useAccount} from 'wagmi'
import alchemy from '@/alchemy'

const poppins = Poppins({ subsets: ['latin'], weight: '400' })

type TagProps = {
  title: String
}

const Tag: FunctionComponent<TagProps>  = ({ title }): JSX.Element => {
  return (
    <div className={styles.tag}>
      {title}
    </div>
  )
}

interface HomePageProps {
  sessions: [Session];
  nfts: any
}

export default function Home({ sessions }: HomePageProps) {

  const [nftData, setNFTData] = useState<any>();

  const { address, isConnected } = useAccount();
  console.log("Address", address);

  useEffect(() => {
    if (isConnected) {
      getNFTData();
    }
    else {
      window.alert("Wallet Not connected");
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [address, isConnected])

  const getNFTData = async () => {
    const nftforOwner = await alchemy.nft.getNftsForOwner(address || '')
    setNFTData(nftforOwner.ownedNfts)
  }
  
  console.log("NFT FROM WALLET", nftData);

  return (
    <>
      <Head>
        <title>Filter Web App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${poppins.className}`}>
        <Nav />
        <div className={styles.content}>
          <div className={styles.tags}>
            <div className={styles.tagcont}>
              <Tag title="All" />
              <Tag title="friends" />
              <Tag title="Games & play" />
              <Tag title="Favorites" />
              <Tag title="Events" />
              <Tag title="Workshop" />
            </div>
            <div className={styles.cresess}>
              <Link href="/session">
                <div className={styles.tag} style={{ background: '#858AEB', color: '#fff' }}>
                  Create Session
                </div>
              </Link>
            </div>
          </div>
          <h2>Upcoming Sessions</h2>
          <div className={styles.upcomingsessions}>
            {nftData && !nftData.length ? (
              <h2>No added posts</h2>
            ) : (
              <>
                {nftData && nftData.slice(0, 3).map((n: any, i: any) => (
                  <Link href={`/s/${n.rawMetadata?.creator}/${n.rawMetadata?.tokenid}`} key={i}>
                    <UpcomingSessionCard session={n} key={i} />
                  </Link>
                ))}
              </>
              )
            }
          </div>
          <h2>Popular Sessions</h2>
          <div className={styles.sessions}>
            {sessions && !sessions.length ? (
                        <h2>No added posts</h2>
                    ) : (
                      <>
                        {sessions.map((session, i) => (
                          <Link href={`/session/${session.creator}/${session.tokenid}`} key={i}>
                            <SessionCard session={session} />
                          </Link>
                        ))}
                      </>
              )
            }
          </div>
        </div>
      </main>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx: any) => {
  // get the current environment
  const dev = process.env.NODE_ENV !== 'production';
  const { DEV_URL, PROD_URL } = process.env;

  // request posts from api
  const response = await fetch(`${dev ? DEV_URL : PROD_URL}/api/session`);
  // extract the data
  const data = await response.json();

  return {
    props: {
      sessions: data['message'],
    },
  };
};