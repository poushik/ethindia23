import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { Poppins } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import Nav from '../../../components/Nav'
import { Session } from '@/types'
import { GetServerSideProps } from 'next'

import { useContract, useAccount, useSigner } from 'wagmi' 
import contract from '../../../../contracts/FilterConnectToken.json';
const contractAddress = '0x2B259cD40DDE4feF333F96Ce11d326ffd191Cad8';

const poppins = Poppins({ subsets: ['latin'], weight: '400' })

interface SessionDetailPageProps {
  sessions: Session;
}

export default function SessionDetail({ sessions }: SessionDetailPageProps) {
  const router = useRouter();
  const {address} = useAccount();
  const { data: signer, isError, isLoading } = useSigner()

  const mainContract: any = useContract({
    address: contractAddress,
    abi: contract.abi,
    signerOrProvider: signer,
  });

  const mint = async () => {
    const tx = await mainContract.safeMint(address, sessions.tokenid, sessions.metadata);
    await tx.wait();
    console.log(tx)
    window.alert(`Minted ${tx}`);
  };

  return (
    <>
      <Head>
        <title>Session Detail Page</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${poppins.className}`}>
        <Nav />
        {sessions && (
          <div className={styles.sessdetail}>
          <h2>{sessions.title}</h2>
          <Image
            className={styles.sdimg}
            src={sessions.image || 'https://ipfs.io/ipfs/QmaSHs4gkn3rSGv73eCNduqHN9WTFoWWLjabXFbpD3Yh6P/0.png'}
            alt={sessions.title || 'Filter Access NFT'}
            width={320}
            height={400}
            priority
          />
          <h3>Session Price : {sessions.price} ETH</h3>
          <h3>Duration : {sessions.duration} Min</h3>
          <p>{sessions.content}</p>
          <button onClick={mint}>
            Enroll Session
          </button>
        </div>
        )}
      </main>
    </>
  )
}

export const getServerSideProps: GetServerSideProps = async (ctx) => {
  const { creator, tokenid } = ctx.query;

  // get the current environment
  const dev = process.env.NODE_ENV !== 'production';
  const apiUrl = dev ? process.env.DEV_URL : process.env.PROD_URL;

  // request session from api
  const response = await fetch(`${apiUrl}/api/detail?creator=${creator}&tokenid=${tokenid}`);
  const data = await response.json();
  console.log("Response Data", data);

  return {
    props: {
      sessions: data.message,
    },
  };
};